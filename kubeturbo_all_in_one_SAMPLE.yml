apiVersion: v1
kind: Namespace
metadata:
  # use this yaml to create a namespace where you will deploy kubeturbo. 
  # Provide a value for name:
  # turbo is default value used in the samples provided
  name: turbo
---
apiVersion: v1
kind: ServiceAccount
metadata:
  # use this yaml to create a service account to run kubeturbo. 
  # Provide a value for name:
  # Update the namespace value if required
  name: turbo-user
  namespace: turbo
---
kind: ClusterRoleBinding
# For OpenShift 3.4-3.7 use apiVersion: v1
# For kubernetes 1.9 use rbac.authorization.k8s.io/v1
# For kubernetes 1.8 use rbac.authorization.k8s.io/v1beta1
apiVersion: rbac.authorization.k8s.io/v1    
metadata:
  # use this yaml to create a binding that will assign cluster-admin to your turbo ServiceAccount 
  # Provide a value for the binding name: and update namespace if needed
  name: turbo-all-binding
  namespace: turbo
subjects:
- kind: ServiceAccount
  # Provide the correct value for service account name: and namespace if needed
  name: turbo-user
  namespace: turbo
roleRef:
  # User creating this resource must have permissions to add this policy to the SA
  kind: ClusterRole
# accepted values cluster-reader disc and monitoring. federation?
  name: cluster-admin
  # For OpenShift v3.4 remove apiGroup line
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: v1
kind: ConfigMap
metadata:
  # use this yaml to create a config that kubeturbo will use to connect to the Turbo Server 
  # Provide a value for the config name: and update namespace if needed
  name: turbo-config
  namespace: turbo
data:
  # Update the values for version, turboServer, opsManagerUserName, opsManagerPassword
  # For version, use Turbo Server Version, even when running CWOM
  # The opsManagerUserName requires Turbo administrator role
  # targetConfig is optional. targetName provides better group naming to identify k8s clusters in UI
  # Master nodes are by default not uniquely identified. Use masterNodeDetectors to define by node name patterns using regex or node labels.
  # DaemonSets are identified by default. Use daemonPodDetectors to identify by name patterns using regex or by namespace.
  turbo.config: |-
    {
        "communicationConfig": {
            "serverMeta": {
                "version": "<INSERT TURBONOMIC VERSION>",
                "turboServer": "https://<INSERT TURBONOMIC IP>"
            },
            "restAPIConfig": {
                "opsManagerUserName": "<TURBONOMIC ADMIN USER>",
                "opsManagerPassword": "<TURBONOMIC ADMIN PASSWORD>"
            }
        },
        "targetConfig": {
            "targetName":"turbonomic_GKE_target"
        },
        "masterNodeDetectors": {
           "nodeNamePatterns": [ ".*master.*" ],
           "nodeLabels": [ {"key": "node-role.kubernetes.io/master", "value": ".*"} ]
        }
    }

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  # use this yaml to deploy the kubeturbo pod 
  # Provide a value for the deploy/pod name: and update namespace if needed
  name: kubeturbo
  namespace: turbo
  labels:
    app: kubeturbo
spec:
  replicas: 1
  template:
    metadata:
      annotations:
        kubeturbo.io/monitored: "false"
      labels:
        app: kubeturbo
    spec:
      # Update serviceAccount if needed
      serviceAccount: turbo-user
      containers:
      - name: kubeturbo
        # Replace the image with desired version:6.2 or latest
        image: vmturbo/kubeturbo:6.3
        imagePullPolicy: Always
        args:
          - --turboconfig=/etc/kubeturbo/turbo.config
          - --v=2
          # Comment out the following two args if running in k8s 1.10 or older, or
          # change to https=false and port=10255 if unsecure kubelet read only is configured
          - --kubelet-https=true
          - --kubelet-port=10250
          # Uncomment to stitch using IP, or if using Openstack, Hyper-V/VMM
          #- --stitch-uuid=false
        volumeMounts:
          # volume will be created, any name will work and must match below
          - name: turbo-volume
            mountPath: /etc/kubeturbo
            readOnly: true
          - name: varlog
            mountPath: /var/log
      volumes:
      - name: turbo-volume
        configMap:
         # Update configMap name if needed
          name: turbo-config
      - name: varlog
        emptyDir: {}
      restartPolicy: Always